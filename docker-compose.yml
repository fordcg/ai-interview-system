version: '3.8'

services:
  # MySQL数据库服务
  database:
    image: mysql:8.0
    container_name: interview_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: interview_system
      MYSQL_USER: interview_user
      MYSQL_PASSWORD: interview_pass
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - interview_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存服务
  redis:
    image: redis:6.2-alpine
    container_name: interview_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - interview_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5

  # 后端Flask服务
  backend:
    build:
      context: ./merged-project-flask
      dockerfile: Dockerfile
    container_name: interview_backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=mysql://interview_user:interview_pass@database:3306/interview_system
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-production-secret-key
      - JWT_SECRET_KEY=your-jwt-secret-key
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - XUNFEI_APP_ID=${XUNFEI_APP_ID}
      - XUNFEI_API_KEY=${XUNFEI_API_KEY}
      - XUNFEI_API_SECRET=${XUNFEI_API_SECRET}
    volumes:
      - ./merged-project-flask/uploads:/app/uploads
      - ./merged-project-flask/logs:/app/logs
      - ./merged-project-flask/models:/app/models
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - interview_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      timeout: 10s
      retries: 5

  # 前端Vue服务
  frontend:
    build:
      context: ./merged-project-vue
      dockerfile: Dockerfile
      args:
        - VUE_APP_API_BASE_URL=http://localhost:5000
    container_name: interview_frontend
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - interview_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      timeout: 10s
      retries: 5

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: interview_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./merged-project-vue/dist:/usr/share/nginx/html
    depends_on:
      - frontend
      - backend
    networks:
      - interview_network
    profiles:
      - production

  # 监控服务 Prometheus（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: interview_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - interview_network
    profiles:
      - monitoring

  # 监控面板 Grafana（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: interview_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - interview_network
    profiles:
      - monitoring

# 网络配置
networks:
  interview_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
